require('dotenv').config();
const pool = require('./src/config/database');
const CronService = require('./src/services/cronService');
const Employee = require('./src/models/Employee');
const TimeRecord = require('./src/models/TimeRecord');
const Report = require('./src/models/Report');

async function testNotifications() {
    const telegramId = process.argv[2];
    if (!telegramId) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö');
        console.log('–ü—Ä–∏–º–µ—Ä: node test_notifications.js 123456789');
        process.exit(1);
    }

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    console.log('üì± Telegram ID:', telegramId);

    try {
        // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await CronService.testNotifications(telegramId);

        // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const employee = await Employee.findByTelegramId(telegramId);
        if (!employee) {
            throw new Error('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const today = new Date().toISOString().split('T')[0];
        const companyId = employee.company_id;

        // 2.1 –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏
        const lateTime = new Date();
        lateTime.setHours(11, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 11:00

        await TimeRecord.create({
            employee_id: employee.id,
            date: today,
            start_time: lateTime,
            status: 'late'
        });
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏');

        // 2.2 –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const yesterdayStr = yesterday.toISOString().split('T')[0];

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        const deleteQuery = 'DELETE FROM reports WHERE employee_id = $1 AND date = $2';
        await pool.query(deleteQuery, [employee.id, yesterdayStr]);
        console.log('‚úÖ –£–¥–∞–ª–µ–Ω –æ—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç—á–µ—Ç–∞)');

        // 2.3 –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
        const insertQuery = `
            INSERT INTO employees (name, telegram_id, company_id, is_active)
            VALUES ($1, $2, $3, $4)
            RETURNING *
        `;
        const newEmployee = await pool.query(insertQuery, [
            '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            '999999999',
            companyId,
            true
        ]);
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫');

        console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        process.exit(1);
    }
}

testNotifications(); 