import 'dotenv/config';
import fs from 'fs';
import http from 'http';
import https from 'https';
import app from './src/app.js';
import { bot } from './src/bot.js';
import * as CronService from './src/services/cronService.js';
import logger from './src/config/logger.js';

const PORT = process.env.PORT || 3000;
const HTTPS_PORT = process.env.HTTPS_PORT || 443;

async function startServer() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Out Time...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET', 'BOT_TOKEN'];
    if (process.env.NODE_ENV === 'production') {
      requiredEnvVars.push('DOMAIN', 'SSL_CERT_PATH', 'SSL_KEY_PATH');
    }
    
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      missingVars.forEach(varName => logger.error(`   - ${varName}`));
      logger.error('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏');
      process.exit(1);
    }

    let server;

    // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
    if (process.env.NODE_ENV === 'production') {
      try {
        const httpsOptions = {
          cert: fs.readFileSync(process.env.SSL_CERT_PATH),
          key: fs.readFileSync(process.env.SSL_KEY_PATH),
          ca: process.env.SSL_CHAIN_PATH ? fs.readFileSync(process.env.SSL_CHAIN_PATH) : undefined
        };

        // –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
        server = https.createServer(httpsOptions, app);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
        server.listen(HTTPS_PORT, () => {
          logger.info(`‚úÖ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTPS_PORT}`);
          logger.info(`üîí SSL/TLS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        });

        // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ HTTPS
        const httpServer = http.createServer((req, res) => {
          res.writeHead(301, { Location: `https://${req.headers.host}${req.url}` });
          res.end();
        });

        httpServer.listen(PORT, () => {
          logger.info(`‚úÖ HTTP->HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });

      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ HTTPS:', { error });
        process.exit(1);
      }
    } else {
      // –í development –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP
      server = app.listen(PORT, () => {
        logger.info(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        logger.info(`üåê Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}/api-docs`);
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    try {
      logger.info('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      await bot.launch();
      logger.info('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –±–æ—Ç–∞):', { message: error.message });
      logger.warn('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    CronService.init();

    // Graceful shutdown
    const gracefulShutdown = (signal) => {
      logger.info(`\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...`);
      
      bot.stop(signal);
      logger.info('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
      server.close(() => {
        logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        logger.info('üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
      });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.once('SIGINT', gracefulShutdown);
    process.once('SIGTERM', gracefulShutdown);

    logger.info('üéâ –°–∏—Å—Ç–µ–º–∞ Out Time —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
    logger.info('üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    logger.info(`   ‚úÖ ${process.env.NODE_ENV === 'production' ? 'HTTPS' : 'HTTP'} —Å–µ—Ä–≤–µ—Ä`);
    logger.info('   ‚úÖ Telegram –±–æ—Ç');
    logger.info('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    logger.info('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL');
    
    if (process.env.NODE_ENV === 'development') {
      logger.info('üß™ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω');
      logger.info('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
      logger.info('   - API: http://localhost:3000/api');
      logger.info('   - Healthcheck: http://localhost:3000/health');
    } else {
      logger.info('üöÄ Production —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
      logger.info('   - SSL/TLS: –ê–∫—Ç–∏–≤–µ–Ω');
      logger.info('   - HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç: –ê–∫—Ç–∏–≤–µ–Ω');
      logger.info('   - HSTS: –ê–∫—Ç–∏–≤–µ–Ω');
    }

  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', { error });
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', { reason, promise });
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', { error });
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer(); 