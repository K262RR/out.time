import 'dotenv/config';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import pg from 'pg';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const { Pool } = pg;

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    connectionString: 'postgresql://postgres:mAPMRzeOTWhoKPOX@db.eokcyeyucknztfzrrwmc.supabase.co:6543/postgres',
    ssl: {
        rejectUnauthorized: false
    }
});

async function migrate() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const client = await pool.connect();
    
    try {
        // –ß–∏—Ç–∞–µ–º –≤—Å–µ SQL —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const files = await fs.readdir(__dirname);
        const sqlFiles = files
            .filter(f => f.endsWith('.sql'))
            .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
        for (const file of sqlFiles) {
            console.log(`üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`);
            const filePath = path.join(__dirname, file);
            const sql = await fs.readFile(filePath, 'utf-8');

            try {
                await client.query('BEGIN');
                
                // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                const commands = sql.split(';')
                    .map(cmd => cmd.trim())
                    .filter(cmd => cmd.length > 0);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
                for (const command of commands) {
                    if (command.trim()) {
                        try {
                            await client.query(command);
                            console.log(`  ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞`);
                        } catch (err) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                            if (err.code === '42P07' || // relation already exists
                                err.code === '42P16' || // index already exists
                                err.code === '42710')   // duplicate object
                            {
                                console.log(`  ‚ö†Ô∏è –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${err.message}`);
                                continue;
                            }
                            throw err;
                        }
                    }
                }
                
                await client.query('COMMIT');
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${file} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
            } catch (error) {
                await client.query('ROLLBACK');
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${file}:`, error.message);
                throw error;
            }
        }

        console.log('‚ú® –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
        process.exit(1);
    } finally {
        client.release();
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
migrate(); 