require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function runMigrations() {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, '001_initial_schema.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await pool.query(migrationSQL);
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('   - companies (–∫–æ–º–ø–∞–Ω–∏–∏)');
    console.log('   - users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)');
    console.log('   - employees (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)');
    console.log('   - time_records (–∑–∞–ø–∏—Å–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)');
    console.log('   - reports (–æ—Ç—á–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)');
    console.log('   - invites (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üîó –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL');
      console.error('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('   - –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL');
      console.error('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
      console.error('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ –∏ –ø–æ—Ä—Ç—É');
    }
    
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function seedDatabase() {
  try {
    console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
    const companyResult = await pool.query(`
      INSERT INTO companies (name, morning_notification_time, evening_notification_time)
      VALUES ('Outcasts Dev Team', '09:00:00', '18:00:00')
      RETURNING id
    `);
    const companyId = companyResult.rows[0].id;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const bcrypt = require('bcrypt');
    const passwordHash = await bcrypt.hash('admin123', 10);
    
    await pool.query(`
      INSERT INTO users (email, password_hash, company_id)
      VALUES ('admin@outcasts.dev', $1, $2)
    `, [passwordHash, companyId]);

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üîë –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:');
    console.log('   Email: admin@outcasts.dev');
    console.log('   –ü–∞—Ä–æ–ª—å: admin123');

  } catch (error) {
    if (error.code === '23505') {
      console.log('‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  
  try {
    if (args.includes('--seed')) {
      await runMigrations();
      await seedDatabase();
    } else {
      await runMigrations();
    }
  } finally {
    await pool.end();
  }
}

main().catch(console.error); 