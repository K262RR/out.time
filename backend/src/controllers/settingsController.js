const Company = require('../models/Company');
const { body, validationResult } = require('express-validator');

class SettingsController {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  static validateSettings = [
    body('companyName')
      .optional()
      .isLength({ min: 2, max: 100 })
      .trim()
      .escape()
      .withMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('morningTime')
      .optional()
      .matches(/^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/)
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (HH:MM:SS)'),
    body('eveningTime')
      .optional()
      .matches(/^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/)
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (HH:MM:SS)'),
    body('timezone')
      .optional()
      .isLength({ min: 3, max: 50 })
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')
  ];

  static async getSettings(req, res) {
    try {
      const companyId = req.user.companyId;
      
      const company = await Company.findById(companyId);
      
      if (!company) {
        return res.status(404).json({
          error: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }

      res.json({
        settings: {
          companyId: company.id,
          companyName: company.name,
          morningNotificationTime: company.morning_notification_time,
          eveningNotificationTime: company.evening_notification_time,
          timezone: company.timezone,
          createdAt: company.created_at,
          updatedAt: company.updated_at
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
      });
    }
  }

  static async updateSettings(req, res) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: errors.array()
        });
      }

      const companyId = req.user.companyId;
      const { 
        companyName, 
        morningTime, 
        eveningTime, 
        timezone 
      } = req.body;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const currentCompany = await Company.findById(companyId);
      if (!currentCompany) {
        return res.status(404).json({
          error: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData = {
        name: companyName || currentCompany.name,
        morningTime: morningTime || currentCompany.morning_notification_time,
        eveningTime: eveningTime || currentCompany.evening_notification_time,
        timezone: timezone || currentCompany.timezone
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
      if (updateData.morningTime === updateData.eveningTime) {
        return res.status(400).json({
          error: '–í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º'
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const updatedCompany = await Company.update(companyId, updateData);

      res.json({
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        settings: {
          companyId: updatedCompany.id,
          companyName: updatedCompany.name,
          morningNotificationTime: updatedCompany.morning_notification_time,
          eveningNotificationTime: updatedCompany.evening_notification_time,
          timezone: updatedCompany.timezone,
          updatedAt: updatedCompany.updated_at
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
      });
    }
  }

  static async getNotificationPreview(req, res) {
    try {
      const companyId = req.user.companyId;
      const company = await Company.findById(companyId);
      
      if (!company) {
        return res.status(404).json({
          error: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const morningPreview = {
        time: company.morning_notification_time,
        message: `üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?\n\n[–î–∞, –Ω–∞—á–∏–Ω–∞—é] [–û–ø–æ–∑–¥–∞—é] [–ë–æ–ª—å–Ω–∏—á–Ω—ã–π/–æ—Ç–ø—É—Å–∫]`,
        description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
      };

      const eveningPreview = {
        time: company.evening_notification_time,
        message: `üåÜ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è!\n–†–∞—Å—Å–∫–∞–∂–∏:\n\n1Ô∏è‚É£ –ß—Ç–æ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è?\n2Ô∏è‚É£ –ë—ã–ª–∏ –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?\n\n–ñ–¥—É —Ç–≤–æ–π –æ—Ç—á–µ—Ç üëá`,
        description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞'
      };

      res.json({
        notifications: {
          morning: morningPreview,
          evening: eveningPreview
        },
        timezone: company.timezone,
        workingDays: ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
      });
    }
  }

  static async getCompanyStats(req, res) {
    try {
      const companyId = req.user.companyId;
      
      const Employee = require('../models/Employee');
      const TimeRecord = require('../models/TimeRecord');
      const Report = require('../models/Report');
      const Invite = require('../models/Invite');

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏
      const employees = await Employee.findByCompanyWithStats(companyId);
      const invites = await Invite.findByCompany(companyId);
      const today = new Date().toISOString().split('T')[0];
      const todayStats = await TimeRecord.getCompanyStats(companyId, today);

      const stats = {
        company: {
          totalEmployees: employees.length,
          activeEmployees: employees.filter(emp => emp.is_active).length,
          totalInvitesSent: invites.length,
          usedInvites: invites.filter(inv => inv.is_used).length
        },
        today: {
          workingEmployees: parseInt(todayStats.working_today) || 0,
          averageWorkHours: todayStats.avg_work_hours 
            ? parseFloat(todayStats.avg_work_hours).toFixed(1) 
            : '0.0'
        },
        allTime: {
          totalReports: employees.reduce((sum, emp) => sum + (parseInt(emp.total_reports) || 0), 0),
          averageReportsPerEmployee: employees.length > 0 
            ? (employees.reduce((sum, emp) => sum + (parseInt(emp.total_reports) || 0), 0) / employees.length).toFixed(1)
            : '0.0'
        }
      };

      res.json({ stats });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏:', error.message);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏'
      });
    }
  }
}

module.exports = SettingsController; 