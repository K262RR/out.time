import cron from 'node-cron';
import { sendMorningNotification, sendEveningNotification, bot } from '../bot/index.js';
import Employee from '../models/Employee.js';
import TimeRecord from '../models/TimeRecord.js';
import { createBackup } from '../../scripts/backup.js';
import logger from '../config/logger.js';
import Invite from '../models/Invite.js';

class CronService {
  static init() {
    console.log('üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    // –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (9:00 AM, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    cron.schedule('0 9 * * 1-5', async () => {
      console.log('üåÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      await this.sendMorningNotifications();
    }, {
      timezone: "Europe/Moscow"
    });

    // –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (6:00 PM, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    cron.schedule('0 18 * * 1-5', async () => {
      console.log('üåÜ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      await this.sendEveningNotifications();
    }, {
      timezone: "Europe/Moscow"
    });

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö (10:00 AM, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    cron.schedule('0 10 * * 1-5', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–ø–æ–∑–¥–∞–≤—à–∏–º...');
      await this.sendLateReminders();
    }, {
      timezone: "Europe/Moscow"
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å)
    cron.schedule('0 0 * * *', async () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...');
      await this.cleanupExpiredInvites();
    }, {
      timezone: "Europe/Moscow"
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 AM)
    cron.schedule('0 3 * * *', async () => {
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await this.createDatabaseBackup();
    }, {
      timezone: "Europe/Moscow"
    });

    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
    console.log('   üìÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 9:00 (–ø–Ω-–ø—Ç)');
    console.log('   üìÖ –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 18:00 (–ø–Ω-–ø—Ç)');
    console.log('   üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–ø–æ–∑–¥–∞–≤—à–∏–º: 10:00 (–ø–Ω-–ø—Ç)');
    console.log('   üìÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: 00:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)');
    console.log('   üìÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: 3:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)');
  }

  static async sendMorningNotifications() {
    try {
      const employees = await Employee.findActive();
      let sentCount = 0;
      let errorCount = 0;

      for (const employee of employees) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è
          const today = new Date().toISOString().split('T')[0];
          const existingRecord = await TimeRecord.findByEmployeeAndDate(employee.id, today);
          
          if (existingRecord && existingRecord.start_time) {
            console.log(`‚è≠Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employee.name} —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è`);
            continue;
          }

          await sendMorningNotification(employee.telegram_id, employee.name);
          sentCount++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${employee.name}:`, error.message);
          errorCount++;
        }
      }

      console.log(`‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sentCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  static async sendEveningNotifications() {
    try {
      const employees = await Employee.findActive();
      const today = new Date().toISOString().split('T')[0];
      let sentCount = 0;
      let errorCount = 0;

      for (const employee of employees) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä–∞–±–æ—Ç–µ —Å–µ–≥–æ–¥–Ω—è
          const timeRecord = await TimeRecord.findByEmployeeAndDate(employee.id, today);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –∏ –Ω–µ —Å–¥–∞–ª –æ—Ç—á–µ—Ç
          if (timeRecord && timeRecord.start_time && !timeRecord.end_time) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            if (timeRecord.status === 'work' || timeRecord.status === 'late') {
              await sendEveningNotification(employee.telegram_id, employee.name);
              sentCount++;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
              await new Promise(resolve => setTimeout(resolve, 100));
            } else {
              console.log(`‚è≠Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employee.name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è (${timeRecord.status})`);
            }
          } else {
            console.log(`‚è≠Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${employee.name} –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ä–∞–±–æ—Ç—É –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–Ω—å`);
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${employee.name}:`, error.message);
          errorCount++;
        }
      }

      console.log(`‚úÖ –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sentCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  static async sendLateReminders() {
    try {
      const employees = await Employee.findActive();
      const today = new Date().toISOString().split('T')[0];
      let sentCount = 0;

      for (const employee of employees) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ 10:00
          const timeRecord = await TimeRecord.findByEmployeeAndDate(employee.id, today);
          
          if (!timeRecord || !timeRecord.start_time) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await bot.telegram.sendMessage(
              employee.telegram_id,
              `‚è∞ –ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç–µ.
–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: 'üè¢ –£–∂–µ —Ä–∞–±–æ—Ç–∞—é', callback_data: 'start_work' },
                      { text: '‚è∞ –û–ø–æ–∑–¥–∞—é', callback_data: 'start_late' }
                    ],
                    [
                      { text: 'üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π/–æ—Ç–ø—É—Å–∫', callback_data: 'sick_vacation' }
                    ]
                  ]
                }
              }
            );
            
            sentCount++;
            await new Promise(resolve => setTimeout(resolve, 100));
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${employee.name}:`, error.message);
        }
      }

      console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–ø–æ–∑–¥–∞–≤—à–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sentCount}`);

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  static async cleanupExpiredInvites() {
    try {
      const deletedInvites = await Invite.cleanupExpired();
      
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${deletedInvites.length}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
    }
  }

  static async createDatabaseBackup() {
    try {
      await createBackup();
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    }
  }

  static async testNotifications(telegramId) {
    try {
      const employee = await Employee.findByTelegramId(telegramId);
      if (!employee) {
        throw new Error('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –¢–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await sendMorningNotification(telegramId, employee.name);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      // –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥
      await new Promise(resolve => setTimeout(resolve, 5000));

      // –¢–µ—Å—Ç–æ–≤–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await sendEveningNotification(telegramId, employee.name);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
}

export default CronService; 