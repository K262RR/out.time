import { Telegraf } from 'telegraf';
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-fetch
let fetch;
if (typeof globalThis.fetch === 'undefined') {
  fetch = require('node-fetch');
} else {
  fetch = globalThis.fetch;
}
import startHandler from './handlers/startHandler.js';
import reportHandler from './handlers/reportHandler.js';
import statusHandler from './handlers/statusHandler.js';
import { morningKeyboard, eveningKeyboard } from './keyboards/inline.js';

if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
    apiRoot: 'https://api.telegram.org',
    webhookReply: true,
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –≤ production
if (process.env.NODE_ENV === 'production') {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTTPS
  if (!process.env.DOMAIN || !process.env.DOMAIN.startsWith('https://')) {
    console.error('‚ùå DOMAIN –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS –≤ production');
    process.exit(1);
  }

  const webhookUrl = `${process.env.DOMAIN}/bot/webhook`;
  bot.telegram.setWebhook(webhookUrl, {
    drop_pending_updates: true,
    allowed_updates: ['message', 'callback_query'],
    secret_token: process.env.WEBHOOK_SECRET // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ webhook
  }).then(() => {
    console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
    process.exit(1);
  });
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook secret –≤ production
if (process.env.NODE_ENV === 'production') {
  bot.use((ctx, next) => {
    const webhookSecret = ctx.request?.headers['x-telegram-bot-api-secret-token'];
    if (webhookSecret !== process.env.WEBHOOK_SECRET) {
      console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ webhook —Å –Ω–µ–≤–µ—Ä–Ω—ã–º secret token');
      return ctx.reply('Unauthorized');
    }
    return next();
  });
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use((ctx, next) => {
  const user = ctx.from;
  const message = ctx.message?.text || ctx.callbackQuery?.data || 'callback';
  console.log(`[${new Date().toISOString()}] ${user.first_name} (${user.id}): ${message}`);
  return next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
});

// –ö–æ–º–∞–Ω–¥—ã
bot.start(startHandler);
bot.command('status', statusHandler);
bot.command('help', (ctx) => {
  ctx.reply(`
ü§ñ *–ë–æ—Ç —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ Out Time*

üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚è∞ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –í 18:00 - –ø–æ–ø—Ä–æ—à—É –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
‚Ä¢ –û—Ç—á–µ—Ç—ã –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

üí° *–°–æ–≤–µ—Ç:* –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤ –æ—Ç—á–µ—Ç–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  `, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.action('start_work', async (ctx) => {
  await ctx.answerCbQuery();
  await handleWorkStart(ctx, 'work');
});

bot.action('start_late', async (ctx) => {
  await ctx.answerCbQuery();
  await handleWorkStart(ctx, 'late');
});

bot.action('sick_vacation', async (ctx) => {
  await ctx.answerCbQuery();
  await handleSickVacation(ctx);
});

bot.action('working_longer', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply(`üí™ –ü–æ–Ω—è–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.
–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å –æ–± –æ—Ç—á–µ—Ç–µ?`, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚è∞ –î–∞, —á–µ—Ä–µ–∑ —á–∞—Å', callback_data: 'remind_hour' },
          { text: '‚úÖ –£–≤–µ–¥–æ–º–ª—é —Å–∞–º', callback_data: 'no_remind' }
        ]
      ]
    }
  });
});

bot.action('already_finished', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply(`üìù –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:

1Ô∏è‚É£ –ß—Ç–æ —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
2Ô∏è‚É£ –ë—ã–ª–∏ –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?

–ñ–¥—É –≤–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç üëá`);
});

bot.action('remind_hour', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply('‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å!');
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
});

bot.action('no_remind', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply('üëå –ü–æ–Ω—è–ª, –∂–¥–µ–º –≤–∞—à –æ—Ç—á–µ—Ç –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç—á–µ—Ç—ã)
bot.on('text', reportHandler);

// –û–±–Ω–æ–≤–ª—è–µ–º API URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HTTPS
const getApiUrl = () => {
  const baseUrl = process.env.API_BASE_URL || 'http://localhost:3000';
  // –í production –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
  if (process.env.NODE_ENV === 'production' && baseUrl.startsWith('http://')) {
    return baseUrl.replace('http://', 'https://');
  }
  return baseUrl;
};

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
async function handleWorkStart(ctx, status) {
  try {
    const telegramId = ctx.from.id;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –∏—Å–ø–æ–ª—å–∑—É—è HTTPS –≤ production
    const response = await fetch(`${getApiUrl()}/api/bot/start-day`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        telegram_id: telegramId,
        status: status
      })
    });

    const data = await response.json();

    if (data.success) {
      ctx.reply(data.message);
    } else {
      ctx.reply(`‚ùå ${data.error}`);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:', error);
    ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleSickVacation(ctx) {
  ctx.reply(`üè• –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:`, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π', callback_data: 'sick_day' },
          { text: 'üèñÔ∏è –û—Ç–ø—É—Å–∫', callback_data: 'vacation_day' }
        ],
        [
          { text: 'üìù –î—Ä—É–≥–æ–µ', callback_data: 'other_absence' }
        ]
      ]
    }
  });
}

bot.action(['sick_day', 'vacation_day', 'other_absence'], async (ctx) => {
  await ctx.answerCbQuery();
  
  const statusMap = {
    'sick_day': 'sick',
    'vacation_day': 'vacation',
    'other_absence': 'other'
  };

  const messageMap = {
    'sick_day': 'ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π –æ—Ç–º–µ—á–µ–Ω. –í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ!',
    'vacation_day': 'üèñÔ∏è –û—Ç–ø—É—Å–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –•–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ!',
    'other_absence': 'üìù –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ.'
  };

  try {
    const telegramId = ctx.from.id;
    const status = statusMap[ctx.callbackQuery.data];
    
    const response = await fetch(`${getApiUrl()}/api/bot/start-day`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        telegram_id: telegramId,
        status: status
      })
    });

    const data = await response.json();

    if (data.success) {
      ctx.reply(messageMap[ctx.callbackQuery.data]);
    } else {
      ctx.reply(`‚ùå ${data.error}`);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:', error);
    ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendMorningNotification(telegramId, employeeName) {
  try {
    await bot.telegram.sendMessage(telegramId, 
      `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${employeeName}! üëã\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?`,
      { reply_markup: morningKeyboard }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

async function sendEveningNotification(telegramId, employeeName) {
  try {
    await bot.telegram.sendMessage(telegramId,
      `${employeeName}, —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É! üåÜ\n–ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?`,
      { reply_markup: eveningKeyboard }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

export { bot, sendMorningNotification, sendEveningNotification }; 