const { statusKeyboard } = require('../keyboards/inline');

async function statusHandler(ctx) {
  try {
    const telegramId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const response = await fetch(`${process.env.API_BASE_URL || 'http://localhost:3000'}/api/bot/status/${telegramId}`);
    const data = await response.json();

    if (!data.success) {
      return ctx.reply(`‚ùå ${data.error}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`);
    }

    const { employee, today } = data;
    const currentTime = new Date().toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    let statusMessage = `üìä *–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* (${currentTime})\n`;
    statusMessage += `üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${employee.name}\n\n`;

    // –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
    if (!today.hasStarted) {
      statusMessage += `‚ö™ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞—á–∞—Ç\n`;
      statusMessage += `üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n`;
    } else {
      const startTime = new Date(today.startTime).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      });
      
      statusMessage += `‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞: ${startTime}\n`;
      
      if (today.status === 'sick') {
        statusMessage += `ü§í –°—Ç–∞—Ç—É—Å: –ë–æ–ª—å–Ω–∏—á–Ω—ã–π\n`;
      } else if (today.status === 'vacation') {
        statusMessage += `üèñÔ∏è –°—Ç–∞—Ç—É—Å: –û—Ç–ø—É—Å–∫\n`;
      } else if (today.status === 'late') {
        statusMessage += `‚è∞ –°—Ç–∞—Ç—É—Å: –û–ø–æ–∑–¥–∞–Ω–∏–µ\n`;
      } else {
        statusMessage += `üè¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—á–∏–π –¥–µ–Ω—å\n`;
      }

      if (today.hasEnded) {
        const endTime = new Date(today.endTime).toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        });
        statusMessage += `üèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${endTime}\n`;
        statusMessage += `‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${today.workDuration}\n`;
      } else if (today.status === 'work' || today.status === 'late') {
        statusMessage += `‚è±Ô∏è –†–∞–±–æ—Ç–∞—é —Å–µ–π—á–∞—Å...\n`;
      }
    }

    // –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
    statusMessage += `\nüìù *–û—Ç—á–µ—Ç:*\n`;
    if (today.hasReport) {
      statusMessage += `‚úÖ –û—Ç—á–µ—Ç —Å–¥–∞–Ω\n`;
    } else {
      statusMessage += `‚è≥ –û—Ç—á–µ—Ç –Ω–µ —Å–¥–∞–Ω\n`;
      if (today.hasStarted && !today.hasEnded) {
        statusMessage += `üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è\n`;
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let keyboard = null;
    if (!today.hasStarted) {
      keyboard = statusKeyboard;
    } else if (today.hasStarted && !today.hasEnded && !today.hasReport && (today.status === 'work' || today.status === 'late')) {
      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç', callback_data: 'already_finished' }]
          ]
        }
      };
    }

    await ctx.reply(statusMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ statusHandler:', error);
    ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = statusHandler; 